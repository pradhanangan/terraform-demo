name: terraform-demo CI/CD

on:
  push:
    branches: 
      - main
      - develop
      - feature/*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  NETCORE_VERSION: '3.1.x'
  PROJECT_NAME: 'terraform-demo'

jobs:
  output-jobs-env:
    runs-on: ubuntu-latest
    - run: echo "GITHUB_REF ${{github.ref}}"

  build-deploy-sandbox:
    if: github.ref == 'refs/heads/feature/*' && github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT_NAME: sandbox
      AWS_S3_BUCKET: 'int-x-std-terraform-demo-sandbox-s3-bucket'
      AWS_STACKNAME: 'int-x-std-terraform-demo-sandbox-stack'

    steps:
    - run: echo "Starting Build and Deploy  - ${{env.ENVIRONMENT_NAME}}"

    - uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{env.NETCORE_VERSION}}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

    - name: Publish
      run: dotnet publish --output "./src/TerraformDemo.WebAPI/bin/Release/netcoreapp3.1/publish" --configuration "Release" --framework "netcoreapp3.1" /p:GenerateRuntimeConfigurationFiles=true --runtime linux-x64 --self-contained false
    
    - name: Create directory `dist`
      run: mkdir -p ./dist

    - name: zip-files
      uses: papeloto/action-zip@v1
      with:
        files: ./src/TerraformDemo.WebAPI/bin/Release/netcoreapp3.1/publish/
        dest: ./dist/${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip
    
    - name: Copy and rename `serverless.template` file to `dist` folder
      run: cp "./src/TerraformDemo.WebAPI/serverless.template" "./dist/serverless-${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.template"
    
    - name: Publish Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}-artifacts
        path: ./dist/

    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.SANDBOX_AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.SANDBOX_AWS_SECRET_KEY }}
        aws-region: ap-southeast-2

    - name: Copy files to the test website with the AWS CLI
      run: |
        aws s3 cp ./dist/${{ env.PROJECT_NAME }}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip s3://${{env.AWS_S3_BUCKET}}
        aws s3 cp ./dist/serverless-${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.template s3://${{env.AWS_S3_BUCKET}}

    - name: Deploy to AWS CloudFormation
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: ${{env.AWS_STACKNAME}}
        template: "https://${{env.AWS_S3_BUCKET}}.s3.ap-southeast-2.amazonaws.com/serverless-${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.template"
        no-fail-on-empty-changeset: "1"
        parameter-overrides: "BucketName=${{env.AWS_S3_BUCKET}},CodeKey=${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip"
        capabilities: "CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND"
    
    - run: echo "Ending Build and Deploy  - ${{env.ENVIRONMENT_NAME}}"


  build-deploy-dev:
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT_NAME: dev
      AWS_S3_BUCKET: 'int-x-std-terraform-demo-dev-s3-bucket'
      AWS_STACKNAME: 'int-x-std-terraform-demo-dev-stack'

    steps:
    - run: echo "Starting Build and Deploy  - ${{env.ENVIRONMENT_NAME}}"

    - uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{env.NETCORE_VERSION}}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

    - name: Publish
      run: dotnet publish --output "./src/TerraformDemo.WebAPI/bin/Release/netcoreapp3.1/publish" --configuration "Release" --framework "netcoreapp3.1" /p:GenerateRuntimeConfigurationFiles=true --runtime linux-x64 --self-contained false
    
    - name: Create directory `dist`
      run: mkdir -p ./dist

    - name: zip-files
      uses: papeloto/action-zip@v1
      with:
        files: ./src/TerraformDemo.WebAPI/bin/Release/netcoreapp3.1/publish/
        dest: ./dist/${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip
    
    - name: Copy and rename `serverless.template` file to `dist` folder
      run: cp "./src/TerraformDemo.WebAPI/serverless.template" "./dist/serverless-${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.template"
    
    - name: Publish Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}-artifacts
        path: ./dist/

    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{secrets.DEV_AWS_ACCESS_KEY}}
        aws-secret-access-key: ${{secrets.DEV_AWS_SECRET_KEY}}
        aws-region: ap-southeast-2

    - name: Copy files to the test website with the AWS CLI
      run: |
        aws s3 cp ./dist/${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip s3://${{env.AWS_S3_BUCKET}}
        aws s3 cp ./dist/serverless-${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.template s3://${{env.AWS_S3_BUCKET}}

    - name: Deploy to AWS CloudFormation
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: ${{env.AWS_STACKNAME}}
        template: "https://${{env.AWS_S3_BUCKET}}.s3.ap-southeast-2.amazonaws.com/serverless-${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.template"
        no-fail-on-empty-changeset: "1"
        parameter-overrides: "BucketName=${{env.AWS_S3_BUCKET}},CodeKey=${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip"
        capabilities: "CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND"
    
    - run: echo "Ending Build and Deploy  - ${{env.ENVIRONMENT_NAME}}"


  build-deploy-main:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT_NAME: main
      AWS_S3_BUCKET: 'int-x-std-terraform-demo-main-s3-bucket'
      AWS_STACKNAME: 'int-x-std-terraform-demo-main-stack'

    steps:
    - run: echo "Starting Build and Deploy  - ${{env.ENVIRONMENT_NAME}}"

    - uses: actions/checkout@v2
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{env.NETCORE_VERSION}}

    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

    - name: Publish
      run: dotnet publish --output "./src/TerraformDemo.WebAPI/bin/Release/netcoreapp3.1/publish" --configuration "Release" --framework "netcoreapp3.1" /p:GenerateRuntimeConfigurationFiles=true --runtime linux-x64 --self-contained false
    
    - name: Create directory `dist`
      run: mkdir -p ./dist

    - name: zip-files
      uses: papeloto/action-zip@v1
      with:
        files: ./src/TerraformDemo.WebAPI/bin/Release/netcoreapp3.1/publish/
        dest: ./dist/${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip
    
    - name: Copy and rename `serverless.template` file to `dist` folder
      run: cp "./src/TerraformDemo.WebAPI/serverless.template" "./dist/serverless-${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.template"
    
    - name: Publish Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}-artifacts
        path: ./dist/

    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{secrets.MAIN_AWS_ACCESS_KEY}}
        aws-secret-access-key: ${{secrets.MAIN_AWS_SECRET_KEY}}
        aws-region: ap-southeast-2

    - name: Copy files to the test website with the AWS CLI
      run: |
        aws s3 cp ./dist/${{ env.PROJECT_NAME }}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip s3://${{env.AWS_S3_BUCKET}}
        aws s3 cp ./dist/serverless-${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.template s3://${{env.AWS_S3_BUCKET}}

    - name: Deploy to AWS CloudFormation
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: ${{env.AWS_STACKNAME}}
        template: "https://${{env.AWS_S3_BUCKET}}.s3.ap-southeast-2.amazonaws.com/serverless-${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.template"
        no-fail-on-empty-changeset: "1"
        parameter-overrides: "BucketName=${{env.AWS_S3_BUCKET}},CodeKey=${{env.PROJECT_NAME}}-${{env.ENVIRONMENT_NAME}}-${{github.run_number}}.zip"
        capabilities: "CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND"
    
    - run: echo "Ending Build and Deploy  - ${{env.ENVIRONMENT_NAME}}"